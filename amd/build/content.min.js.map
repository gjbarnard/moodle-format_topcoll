{"version":3,"file":"content.min.js","sources":["../src/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Collapsed Topics Course index main component.\n *\n * @module     format_topcoll/content\n * @class      format_topcoll/content\n * @copyright  2022 G J Barnard based upon work done by:\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\n\nexport default class TopcollComponent extends Component {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new TopcollComponent({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist.slice(1) ?? []; // Remove section 0 from the list!\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixTopcollSectionOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixTopcollSectionOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (!container) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (!item) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            let itemno = this.getElement('#tcnoid-'+itemid);\n            if (itemno) {\n                itemno.textContent = index + 1; // Update the section number in the 'left' part.\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (!currentitem) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["obj","_content","__esModule","default","TopcollComponent","Component","create","descriptor","super","static","target","selectors","sectionReturn","element","document","getElementById","reactive","getCurrentCourseEditor","_refreshCourseSectionlist","_ref","_element$sectionlist$","this","sectionlist","slice","listparent","getElement","COURSE_SECTIONLIST","createSection","_createSectionItem","bind","_fixTopcollSectionOrder","SECTION","dettachedSections","async","container","neworder","selector","dettachedelements","createMethod","length","classList","add","innerHTML","dndFakeActivity","remove","forEach","itemid","index","_ref2","_this$getElement","item","itemno","textContent","currentitem","children","insertBefore","append","_lastchild$classList","lastchild","lastChild","_lastchild$dataset$id","_lastchild$dataset","contains","dataset","id","removeChild","_exports"],"mappings":"0JAyBwD,IAAAA;;;;;;;;;qFAAxDC,UAAwDD,IAAxDC,WAAwDD,IAAAE,WAAAF,IAAAG,CAAAA,QAAAH,KAGzC,MAAMI,yBAAyBC,SAAAA,QAO1CC,OAAOC,YACHC,MAAMF,OAAOC,WACjB,CAUAE,YAAYC,OAAQC,UAAWC,eAC3B,OAAO,IAAIR,iBAAiB,CACxBS,QAASC,SAASC,eAAeL,QACjCM,UAAU,EAAAC,cAAAA,0BACVN,oBACAC,6BAER,CAQAM,0BAAyBC,MAAY,IAAAC,sBAAA,IAAXP,QAACA,SAAQM,KAE/B,GAAmC,GAA/BE,KAAKL,SAASJ,cACd,OAEJ,MAAMU,YAA0C,QAA/BF,sBAAGP,QAAQS,YAAYC,MAAM,UAAEH,IAAAA,sBAAAA,sBAAI,GAC9CI,WAAaH,KAAKI,WAAWJ,KAAKV,UAAUe,oBAE5CC,cAAgBN,KAAKO,mBAAmBC,KAAKR,MAC/CG,YACAH,KAAKS,wBAAwBN,WAAYF,YAAaD,KAAKV,UAAUoB,QAASV,KAAKW,kBAAmBL,cAE9G,CAWAM,8BAA8BC,UAAWC,SAAUC,SAAUC,kBAAmBC,cAC5E,IAAKJ,UACD,OAIJ,IAAKC,SAASI,OAGV,OAFAL,UAAUM,UAAUC,IAAI,eACxBP,UAAUQ,UAAY,IA8B1B,IAAIC,gBAGJ,IA5BAT,UAAUM,UAAUI,OAAO,UAG3BT,SAASU,SAAQ,CAACC,OAAQC,SAAU,IAAAC,MAAAC,iBAChC,IAAIC,KAAqEF,QAAjEA,MAAoCC,QAApCA,iBAAG5B,KAAKI,WAAWW,SAAUU,eAAOG,IAAAA,iBAAAA,iBAAIZ,kBAAkBS,eAAOE,IAAAA,MAAAA,MAAIV,aAAaJ,UAAWY,QACrG,IAAKI,KAED,OAEJ,IAAIC,OAAS9B,KAAKI,WAAW,WAAWqB,QACpCK,SACAA,OAAOC,YAAcL,MAAQ,GAGjC,MAAMM,YAAcnB,UAAUoB,SAASP,OAClCM,YAIDA,cAAgBH,MAChBhB,UAAUqB,aAAaL,KAAMG,aAJ7BnB,UAAUsB,OAAON,KAKrB,IAOGhB,UAAUoB,SAASf,OAASJ,SAASI,QAAQ,CAAA,IAAAkB,qBAChD,MAAMC,UAAYxB,UAAUyB,UAGrB,IAAAC,sBAAAC,mBAFP,GAAIH,iBAAoBD,QAAXA,qBAATC,UAAWlB,qBAASiB,sBAApBA,qBAAsBK,SAAS,qBAC/BnB,gBAAkBe,eAElBrB,kBAAwCuB,QAAvBA,sBAACF,iBAAkB,QAATG,mBAATH,UAAWK,eAAXF,IAAkBA,wBAAT,EAATA,mBAAoBG,UAAEJ,IAAAA,sBAAAA,sBAAI,GAAKF,UAErDxB,UAAU+B,YAAYP,UAC1B,CAEIf,iBACAT,UAAUsB,OAAOb,gBAEzB,EACH,OAAAuB,SAAA/D,QAAAC,iBAAA8D,SAAA/D,OAAA"}