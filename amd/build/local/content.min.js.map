{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Collapsed Topics Course index main component.\n *\n * @module     format_topcoll/local/content\n * @class      format_topcoll/local/content\n * @copyright  2022 G J Barnard based upon work done by:\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/content';\nimport Config from 'core/config';\nimport Fragment from 'core/fragment';\nimport { getCurrentCourseEditor } from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Log from 'core/log';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport TopcollDispatchActions from 'format_topcoll/local/content/actions';\nimport {setUserTopcollToggle, userSetUserToggleAll} from 'format_topcoll/util';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class TopcollComponent extends Component {\n\n    /**\n     * The class constructor.\n     *\n     * The only param this method gets is a constructor with all the mandatory\n     * and optional component data. Component will receive the same descriptor\n     * as create method param.\n     *\n     * This method will call the \"create\" method before registering the component into\n     * the reactive module. This way any component can add default selectors and events.\n     *\n     * @param {descriptor} descriptor data to create the object.\n     */\n    constructor(descriptor) {\n        super(descriptor);\n        const tcdata = this.getElement(this.selectors.TC_DATA);\n        if (tcdata) {\n            this.oneTopic = (tcdata.dataset.onetopic === 'true');\n            if (tcdata.dataset.onetopictoggle === 'false') {\n                this.currentTopicNum = false;\n            } else {\n                this.currentTopicNum = tcdata.dataset.onetopictoggle;\n            }\n        }\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new TopcollComponent({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        this._indexContents();\n\n        // Toggle.\n        const toogleAllClosed = this.getElement(this.selectors.TOGGLE_ALL_ClOSED);\n        if (toogleAllClosed) {\n            this.addEventListener(toogleAllClosed, 'click', this._toogleAllClosedToggler);\n            this.addEventListener(toogleAllClosed, 'keydown', e => {\n                // Close all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._toogleAllClosedToggler(e);\n                }\n            });\n        }\n\n        const toogleAllOpen = this.getElement(this.selectors.TOGGLE_ALL_OPEN);\n        if (toogleAllOpen) {\n            this.addEventListener(toogleAllOpen, 'click', this._toogleAllOpenToggler);\n            this.addEventListener(toogleAllOpen, 'keydown', e => {\n                // Open all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._toogleAllOpenToggler(e);\n                }\n            });\n        }\n\n        const toggles = this.getElements(this.selectors.TOGGLE);\n        for (const toggle of toggles) {\n            this.addEventListener(toggle, 'click', this._toogleToggler);\n            this.addEventListener(toggle, 'keydown', e => {\n                if (e.key === ' ') {\n                    this._toogleToggler(e);\n                }\n            });\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new TopcollDispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document,\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\n            {watch: `cm.name:updated`, handler: this._refreshCmName},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            {watch: `section.title:updated`, handler: this._refreshSectionTitle},\n            //{watch: `section:updated`, handler: this._refreshTCSection},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Section visibility.\n            {watch: `section.visible:updated`, handler: this._reloadSection},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n        ];\n    }\n\n    _refreshTCSection({element}) {\n        Log.debug(element.id);\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        Log.debug('_refreshSectionNumber ' + element.id);\n\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n\n        if (target.classList.contains('delegated-section')) {\n            // Update section numbers in all data, css and YUI attributes.\n            target.id = `section-${element.number}`;\n            // YUI uses section number as section id in data-sectionid, in principle if a format use components\n            // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n            // use it for legacy purposes.\n            target.dataset.sectionid = element.number;\n            // The data-number is the attribute used by components to store the section number.\n            target.dataset.number = element.number;\n\n            // Update title and title inplace editable, if any.\n            const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n            if (inplace) {\n                // The course content HTML can be modified at any moment, so the function need to do some checkings\n                // to make sure the inplace editable still represents the same itemid.\n                const currentvalue = inplace.getValue();\n                const currentitemid = inplace.getItemId();\n                // Unnamed sections must be recalculated.\n                if (inplace.getValue() === '') {\n                    // The value to send can be an empty value if it is a default name.\n                    if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                        inplace.setValue(element.rawtitle);\n                    }\n                }\n            }\n        } else {\n            // Normal section.\n            // As the number has changed then we need to regenerate the whole section.\n            this._reloadSection({\n                element: element,\n            });\n        }\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        Log.debug('_reloadSection ' + element.id);\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            // Cancel any pending reload because the section will reload cms too.\n            for (const cmId of element.cmlist) {\n                this._cancelDebouncedReloadCm(cmId);\n            }\n            const promise = Fragment.loadFragment(\n                'core_courseformat',\n                'section',\n                Config.courseContextId,\n                {\n                    id: element.id,\n                    courseid: Config.courseId,\n                    sr: this.reactive.sectionReturn ?? null,\n                }\n            );\n            promise.then((html, js) => {\n                Log.debug('_reloadSection promise reply eid: ' + element.id);\n                Templates.replaceNode(sectionitem, html, js);\n                this._indexContents();\n\n                const container = this.getElement(this.selectors.COURSE_SECTIONLIST);\n                const toggle = container.querySelector('[data-id=\"' + element.id + '\"] ' + this.selectors.TOGGLE);\n                Log.debug('toggle id ' + toggle.id + ' parent li ' + toggle.parentElement.parentElement.id +\n                    ' ' + toggle.parentElement.parentElement.dataset.id);\n                if (toggle !== null) {\n                    Log.debug('toggle exists ' + toggle.id);\n                    this.addEventListener(toggle, 'click', this._toogleToggler);\n                    this.addEventListener(toggle, 'keydown', e => {\n                        // Open all sections when Space key is pressed on the toggle button.\n                        if (e.key === ' ') {\n                            this._toogleToggler(e);\n                        }\n                    });\n                }\n\n                pendingReload.resolve();\n            }).catch(() => {\n                Log.debug('_reloadSection promise fail ' + element.id);\n                pendingReload.resolve();\n            });\n        } else {\n            Log.debug('_reloadSection no section item ' + element.id);\n        }\n    }\n\n    /**\n     * Handle the close all toggles button.\n     *\n     * @param {Event} event the triggered event\n     */\n    _toogleAllClosedToggler(event) {\n        event.preventDefault();\n\n        const toggles = this.getElements(this.selectors.TOGGLE + ' .the_toggle');\n        for (const toggle of toggles) {\n            toggle.classList.add('toggle_closed');\n            toggle.classList.remove('toggle_open');\n        }\n        const toggledsections = this.getElements(this.selectors.TOGGLED_SECTION);\n        for (const toggledsection of toggledsections) {\n            toggledsection.classList.remove('sectionopen');\n        }\n\n        userSetUserToggleAll(Config.courseId, false);\n    }\n\n    /**\n     * Handle the open all toggles button.\n     *\n     * @param {Event} event the triggered event\n     */\n    _toogleAllOpenToggler(event) {\n        event.preventDefault();\n\n        const toggles = this.getElements(this.selectors.TOGGLE + ' .the_toggle');\n        for (const toggle of toggles) {\n            toggle.classList.add('toggle_open');\n            toggle.classList.remove('toggle_closed');\n        }\n        const toggledsections = this.getElements(this.selectors.TOGGLED_SECTION);\n        for (const toggledsection of toggledsections) {\n            toggledsection.classList.add('sectionopen');\n        }\n\n        userSetUserToggleAll(Config.courseId, true);\n    }\n\n    /**\n     * Handle the toggler.\n     *\n     * @param {Event} event the triggered event\n     */\n    _toogleToggler(event) {\n        event.preventDefault();\n        Log.debug('_toogleToggler');\n        if (this.reactive.isEditing) {\n            const parentClasses = event.target.parentElement.classList;\n            if ((parentClasses.contains('quickediticon')) || (parentClasses.contains('inplaceeditable'))) {\n                return;\n            }\n        }\n\n        const toggle = event.target.closest(this.selectors.TOGGLE);\n        const toggleNum = parseInt(toggle.getAttribute('id').replace(\"toggle-\", \"\"));\n        Log.debug('_toogleToggler: ' + toggleNum);\n\n        if (this.oneTopic === true) {\n            if ((this.currentTopicNum !== false) && (this.currentTopicNum != toggleNum)) {\n                const currentTargetParent = this.getElement('#toggle-' + this.currentTopicNum).parentElement;\n                const currentToggle = currentTargetParent.querySelector('.the_toggle');\n                currentToggle.classList.add('toggle_closed');\n                currentToggle.classList.remove('toggle_open');\n                currentToggle.setAttribute('aria-expanded', 'false');\n\n                const currentSection = currentTargetParent.querySelector(this.selectors.TOGGLED_SECTION);\n                currentSection.classList.remove('sectionopen');\n\n                setUserTopcollToggle(Config.courseId, this.currentTopicNum, false);\n                this.currentTopicNum = false;\n            }\n        }\n\n        const target = toggle.querySelector('.the_toggle');\n        const targetSection = toggle.parentElement.querySelector(this.selectors.TOGGLED_SECTION);\n        var state;\n        if (target.classList.contains('toggle_closed')) {\n            target.classList.add('toggle_open');\n            target.classList.remove('toggle_closed');\n            target.setAttribute('aria-expanded', 'true');\n            targetSection.classList.add('sectionopen');\n            if (this.oneTopic === true) {\n                this.currentTopicNum = toggleNum;\n            }\n            state = true;\n        } else {\n            target.classList.add('toggle_closed');\n            target.classList.remove('toggle_open');\n            target.setAttribute('aria-expanded', 'false');\n            targetSection.classList.remove('sectionopen');\n            if (this.oneTopic === true) {\n                this.currentTopicNum = false;\n            }\n            state = false;\n        }\n        setUserTopcollToggle(Config.courseId, toggleNum, state);\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.state the full state object.\n     */\n    _refreshCourseSectionlist({state}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn !== null) {\n            return;\n        }\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixTopcollSectionOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixTopcollSectionOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (!item) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            let itemno = this.getElement('#tcnoid-'+itemid);\n            if (itemno) {\n                itemno.textContent = index + 1; // Update the section number in the 'left' part.\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (!currentitem) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["TopcollComponent","Component","constructor","descriptor","tcdata","this","getElement","selectors","TC_DATA","oneTopic","dataset","onetopic","onetopictoggle","currentTopicNum","target","sectionReturn","element","document","getElementById","reactive","stateReady","_indexContents","toogleAllClosed","TOGGLE_ALL_ClOSED","addEventListener","_toogleAllClosedToggler","e","key","toogleAllOpen","TOGGLE_ALL_OPEN","_toogleAllOpenToggler","toggles","getElements","TOGGLE","toggle","_toogleToggler","supportComponents","isEditing","TopcollDispatchActions","classList","add","classes","STATEDREADY","CourseEvents","manualCompletionToggled","_completionHandler","_scrollHandler","getWatchers","watch","handler","_reloadCm","_refreshCmName","_refreshSectionNumber","_refreshSectionTitle","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","_refreshTCSection","debug","id","SECTION","contains","number","sectionid","inplace","inplaceeditable","getInplaceEditable","querySelector","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","pendingReload","Pending","sectionitem","cmId","cmlist","_cancelDebouncedReloadCm","Fragment","loadFragment","Config","courseContextId","courseid","courseId","sr","then","html","js","replaceNode","COURSE_SECTIONLIST","parentElement","resolve","catch","event","preventDefault","remove","toggledsections","TOGGLED_SECTION","toggledsection","parentClasses","closest","toggleNum","parseInt","getAttribute","replace","currentTargetParent","currentToggle","setAttribute","targetSection","state","sectionlist","getExporter","listedSectionIds","listparent","createSection","_createSectionItem","bind","_fixTopcollSectionOrder","dettachedSections","container","neworder","selector","dettachedelements","createMethod","undefined","length","innerHTML","dndFakeActivity","forEach","itemid","index","item","itemno","textContent","currentitem","children","insertBefore","append","lastchild","lastChild","_lastchild$classList","_lastchild$dataset","removeChild"],"mappings":"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"}