{"version":3,"file":"util.min.js","sources":["../src/util.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n//\n// Util Module based on core_user/repository.\n//\n// @module     format_topcoll/util\n// @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n// @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later.\n// @copyright  2025 G J Barnard.\n// @author     G J Barnard -\n//               {@link https://moodle.org/user/profile.php?id=442195}\n//               {@link https://gjbarnard.co.uk}\n// @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later.\n//\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n * Set single user toggle\n *\n * @param {Integer} courseid Course id.\n * @param {Integer} togglenum Toggle number.\n * @param {Boolean} togglestate State of the toggle.\n * @return {Promise}\n */\nexport const setUserTopcollToggle = (courseid, togglenum, togglestate) => {\n    return setUserTopcollToggles([{courseid, togglenum, togglestate}]);\n};\n\n/**\n * Set multiple user topcoll toggles.\n *\n * @param {Object[]} togglestates Array of states.\n * @return {Promise}\n */\nconst setUserTopcollToggles = (togglestates) => {\n    return fetchMany([{\n        methodname: 'format_topcoll_user_set_toggle',\n        args: {togglestates}\n    }])[0];\n};\n\n/**\n * Set toggle all.\n *\n * @param {Integer} courseid Course id.\n * @param {Boolean} toggleallstate State of all the toggles.\n * @return {Promise}\n */\nexport const userSetUserToggleAll = (courseid, toggleallstate) => {\n    return userSetUserTogglesAll([{courseid, toggleallstate}]);\n};\n\n/**\n * Set multiple user topcoll toggles.\n *\n * @param {Object[]} toggleallstates Array of states.\n * @return {Promise}\n */\nconst userSetUserTogglesAll = (toggleallstates) => {\n    return fetchMany([{\n        methodname: 'format_topcoll_user_set_toggleall',\n        args: {toggleallstates}\n    }])[0];\n};\n"],"names":["courseid","togglenum","togglestate","setUserTopcollToggles","togglestates","methodname","args","toggleallstate","userSetUserTogglesAll","toggleallstates"],"mappings":"wOAsCoC,CAACA,SAAUC,UAAWC,cAC/CC,sBAAsB,CAAC,CAACH,SAAAA,SAAUC,UAAAA,UAAWC,YAAAA,qBASlDC,sBAAyBC,eACpB,cAAU,CAAC,CACdC,WAAY,iCACZC,KAAM,CAACF,aAAAA,iBACP,iCAU4B,CAACJ,SAAUO,iBACpCC,sBAAsB,CAAC,CAACR,SAAAA,SAAUO,eAAAA,wBASvCC,sBAAyBC,kBACpB,cAAU,CAAC,CACdJ,WAAY,oCACZC,KAAM,CAACG,gBAAAA,oBACP"}